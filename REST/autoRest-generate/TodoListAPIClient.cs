// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;

namespace TodoListAPI
{
    /// <summary> The TodoListAPI service client. </summary>
    public partial class TodoListAPIClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        public virtual HttpPipeline Pipeline => _pipeline;

        /// <summary> Initializes a new instance of TodoListAPIClient. </summary>
        public TodoListAPIClient() : this(new Uri(""), new TodoListAPIClientOptions())
        {
        }

        /// <summary> Initializes a new instance of TodoListAPIClient. </summary>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="endpoint"/> is null. </exception>
        public TodoListAPIClient(Uri endpoint, TodoListAPIClientOptions options)
        {
            Argument.AssertNotNull(endpoint, nameof(endpoint));
            options ??= new TodoListAPIClientOptions();

            ClientDiagnostics = new ClientDiagnostics(options, true);
            _pipeline = HttpPipelineBuilder.Build(options, Array.Empty<HttpPipelinePolicy>(), Array.Empty<HttpPipelinePolicy>(), new ResponseClassifier());
            _endpoint = endpoint;
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetTodoItemsAsync and parse the result.
        /// <code><![CDATA[
        /// var client = new TodoListAPIClient();
        /// 
        /// Response response = await client.GetTodoItemsAsync();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("id").ToString());
        /// Console.WriteLine(result[0].GetProperty("titre").ToString());
        /// Console.WriteLine(result[0].GetProperty("description").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfTodoItem</c>:
        /// <code>{
        ///   id: number, # Optional.
        ///   titre: string, # Optional.
        ///   description: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetTodoItemsAsync(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("TodoListAPIClient.GetTodoItems");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTodoItemsRequest(context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetTodoItems and parse the result.
        /// <code><![CDATA[
        /// var client = new TodoListAPIClient();
        /// 
        /// Response response = client.GetTodoItems();
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result[0].GetProperty("id").ToString());
        /// Console.WriteLine(result[0].GetProperty("titre").ToString());
        /// Console.WriteLine(result[0].GetProperty("description").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>ArrayOfTodoItem</c>:
        /// <code>{
        ///   id: number, # Optional.
        ///   titre: string, # Optional.
        ///   description: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetTodoItems(RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("TodoListAPIClient.GetTodoItems");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTodoItemsRequest(context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetTodoItemAsync with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new TodoListAPIClient();
        /// 
        /// Response response = await client.GetTodoItemAsync(1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("titre").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>TodoItem</c>:
        /// <code>{
        ///   id: number, # Optional.
        ///   titre: string, # Optional.
        ///   description: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> GetTodoItemAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("TodoListAPIClient.GetTodoItem");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTodoItemRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. Details of the response body schema are in the Remarks section below. </returns>
        /// <example>
        /// This sample shows how to call GetTodoItem with required parameters and parse the result.
        /// <code><![CDATA[
        /// var client = new TodoListAPIClient();
        /// 
        /// Response response = client.GetTodoItem(1234);
        /// 
        /// JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
        /// Console.WriteLine(result.GetProperty("id").ToString());
        /// Console.WriteLine(result.GetProperty("titre").ToString());
        /// Console.WriteLine(result.GetProperty("description").ToString());
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the response payload.
        /// 
        /// Response Body:
        /// 
        /// Schema for <c>TodoItem</c>:
        /// <code>{
        ///   id: number, # Optional.
        ///   titre: string, # Optional.
        ///   description: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response GetTodoItem(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("TodoListAPIClient.GetTodoItem");
            scope.Start();
            try
            {
                using HttpMessage message = CreateGetTodoItemRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CreateTodoItemAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new TodoListAPIClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.CreateTodoItemAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call CreateTodoItemAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new TodoListAPIClient();
        /// 
        /// var data = new {
        ///     titre = "<CreateOrUpdateTodoItemTitre>",
        ///     description = "<CreateOrUpdateTodoItemDescription>",
        /// };
        /// 
        /// Response response = await client.CreateTodoItemAsync(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>CreateOrUpdateTodoItem</c>:
        /// <code>{
        ///   titre: string, # Optional.
        ///   description: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> CreateTodoItemAsync(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("TodoListAPIClient.CreateTodoItem");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateTodoItemRequest(content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call CreateTodoItem with required parameters.
        /// <code><![CDATA[
        /// var client = new TodoListAPIClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.CreateTodoItem(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call CreateTodoItem with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new TodoListAPIClient();
        /// 
        /// var data = new {
        ///     titre = "<CreateOrUpdateTodoItemTitre>",
        ///     description = "<CreateOrUpdateTodoItemDescription>",
        /// };
        /// 
        /// Response response = client.CreateTodoItem(RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>CreateOrUpdateTodoItem</c>:
        /// <code>{
        ///   titre: string, # Optional.
        ///   description: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response CreateTodoItem(RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("TodoListAPIClient.CreateTodoItem");
            scope.Start();
            try
            {
                using HttpMessage message = CreateCreateTodoItemRequest(content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call UpdateTodoItemAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new TodoListAPIClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = await client.UpdateTodoItemAsync(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call UpdateTodoItemAsync with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new TodoListAPIClient();
        /// 
        /// var data = new {
        ///     titre = "<CreateOrUpdateTodoItemTitre>",
        ///     description = "<CreateOrUpdateTodoItemDescription>",
        /// };
        /// 
        /// Response response = await client.UpdateTodoItemAsync(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>CreateOrUpdateTodoItem</c>:
        /// <code>{
        ///   titre: string, # Optional.
        ///   description: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual async Task<Response> UpdateTodoItemAsync(int id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("TodoListAPIClient.UpdateTodoItem");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateTodoItemRequest(id, content, contentType, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="content"> The content to send as the body of the request. Details of the request body schema are in the Remarks section below. </param>
        /// <param name="contentType"> Body Parameter content-type. Allowed values: &quot;application/*+json&quot; | &quot;application/json&quot; | &quot;text/json&quot;. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call UpdateTodoItem with required parameters.
        /// <code><![CDATA[
        /// var client = new TodoListAPIClient();
        /// 
        /// var data = new {};
        /// 
        /// Response response = client.UpdateTodoItem(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// This sample shows how to call UpdateTodoItem with all parameters and request content.
        /// <code><![CDATA[
        /// var client = new TodoListAPIClient();
        /// 
        /// var data = new {
        ///     titre = "<CreateOrUpdateTodoItemTitre>",
        ///     description = "<CreateOrUpdateTodoItemDescription>",
        /// };
        /// 
        /// Response response = client.UpdateTodoItem(1234, RequestContent.Create(data), ContentType.ApplicationOctetStream);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        /// <remarks>
        /// Below is the JSON schema for the request payload.
        /// 
        /// Request Body:
        /// 
        /// Schema for <c>CreateOrUpdateTodoItem</c>:
        /// <code>{
        ///   titre: string, # Optional.
        ///   description: string, # Optional.
        /// }
        /// </code>
        /// 
        /// </remarks>
        public virtual Response UpdateTodoItem(int id, RequestContent content, ContentType contentType, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("TodoListAPIClient.UpdateTodoItem");
            scope.Start();
            try
            {
                using HttpMessage message = CreateUpdateTodoItemRequest(id, content, contentType, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteTodoItemAsync with required parameters.
        /// <code><![CDATA[
        /// var client = new TodoListAPIClient();
        /// 
        /// Response response = await client.DeleteTodoItemAsync(1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual async Task<Response> DeleteTodoItemAsync(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("TodoListAPIClient.DeleteTodoItem");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTodoItemRequest(id, context);
                return await _pipeline.ProcessMessageAsync(message, context).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        /// <param name="id"> The Integer to use. </param>
        /// <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        /// <exception cref="RequestFailedException"> Service returned a non-success status code. </exception>
        /// <returns> The response returned from the service. </returns>
        /// <example>
        /// This sample shows how to call DeleteTodoItem with required parameters.
        /// <code><![CDATA[
        /// var client = new TodoListAPIClient();
        /// 
        /// Response response = client.DeleteTodoItem(1234);
        /// Console.WriteLine(response.Status);
        /// ]]></code>
        /// </example>
        public virtual Response DeleteTodoItem(int id, RequestContext context = null)
        {
            using var scope = ClientDiagnostics.CreateScope("TodoListAPIClient.DeleteTodoItem");
            scope.Start();
            try
            {
                using HttpMessage message = CreateDeleteTodoItemRequest(id, context);
                return _pipeline.ProcessMessage(message, context);
            }
            catch (Exception e)
            {
                scope.Failed(e);
                throw;
            }
        }

        internal HttpMessage CreateGetTodoItemsRequest(RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/v1/TodoList", false);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreateGetTodoItemRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/v1/TodoList/GetTodoItem/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        internal HttpMessage CreateCreateTodoItemRequest(RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/v1/TodoList/CreateTodoItem", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateUpdateTodoItemRequest(int id, RequestContent content, ContentType contentType, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/v1/TodoList/UpdateTodoItem/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", contentType.ToString());
            request.Content = content;
            return message;
        }

        internal HttpMessage CreateDeleteTodoItemRequest(int id, RequestContext context)
        {
            var message = _pipeline.CreateMessage(context, ResponseClassifier200);
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/api/v1/TodoList/DeleteTodoItem/", false);
            uri.AppendPath(id, true);
            request.Uri = uri;
            return message;
        }

        private static ResponseClassifier _responseClassifier200;
        private static ResponseClassifier ResponseClassifier200 => _responseClassifier200 ??= new StatusCodeClassifier(stackalloc ushort[] { 200 });
    }
}
