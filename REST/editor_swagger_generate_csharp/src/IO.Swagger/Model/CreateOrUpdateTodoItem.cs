/* 
 * TODO LIST API
 *
 * exemple d'API REST avec de la documentation
 *
 * OpenAPI spec version: 1.00
 * Contact: frederic.Berton@capgemini.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateOrUpdateTodoItem
    /// </summary>
    [DataContract]
        public partial class CreateOrUpdateTodoItem :  IEquatable<CreateOrUpdateTodoItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrUpdateTodoItem" /> class.
        /// </summary>
        /// <param name="titre">titre.</param>
        /// <param name="description">description.</param>
        public CreateOrUpdateTodoItem(string titre = default(string), string description = default(string))
        {
            this.Titre = titre;
            this.Description = description;
        }
        
        /// <summary>
        /// Gets or Sets Titre
        /// </summary>
        [DataMember(Name="titre", EmitDefaultValue=false)]
        public string Titre { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateOrUpdateTodoItem {\n");
            sb.Append("  Titre: ").Append(Titre).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateOrUpdateTodoItem);
        }

        /// <summary>
        /// Returns true if CreateOrUpdateTodoItem instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateOrUpdateTodoItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateOrUpdateTodoItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Titre == input.Titre ||
                    (this.Titre != null &&
                    this.Titre.Equals(input.Titre))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Titre != null)
                    hashCode = hashCode * 59 + this.Titre.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
